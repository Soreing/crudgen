// Code generated by go generate; DO NOT EDIT.
package repo

import (
	"github.com/soreing/crudgen/example/models"
)

type UserCRUD interface {
	Create(obj models.User) (*models.User, error)
	Read(id string) (*models.User, error)
	Update(id string, obj models.User) (*models.User, error)
	Delete(id string) (error)
}

func (r *UserRepoImpl) Create(obj models.User) (*models.User, error) {
	rec := &models.User{}
	err := r.db.Get(
		rec, ""+
			"INSERT INTO users(id, email, full_name, created_at, updated_at) "+
			"VALUES($1, $2, $3, $4, $5) "+
			"RETURNING * ",
		obj.Id, obj.Email, obj.FullName, obj.CreatedAt, obj.UpdatedAt, 
	)

	if err != nil {
		return nil, err
	} else {
		return rec, nil
	}
} 

func (r *UserRepoImpl) Read(id string) (*models.User, error) {
	rec := &models.User{}
	err := r.db.Get(
		rec, ""+
			"SELECT * "+
			"FROM users "+
			"WHERE id = $1",
			id, 
	)

	if err != nil {
		return nil, err
	} else {
		return rec, nil
	}
} 


func (r *UserRepoImpl) Update(id string, obj models.User) (*models.User, error) {
	old := &models.User{}
	err := r.db.Get(
		old, ""+
			"UPDATE users SET "+
			"  email = $2, "+
			"  full_name = $3, "+
			"  updated_at = $4 "+
			"FROM (SELECT * FROM users WHERE id = $1 FOR UPDATE) tb "+
			"WHERE users.id = tb.id "+
			"RETURNING tb.*",
			id, obj.Email, obj.FullName, obj.UpdatedAt, 
	)

	if err != nil {
		return nil, err
	} else {
		return old, nil
	}
} 

func (r *UserRepoImpl) Delete(id string) (error) {
	_, err := r.db.Exec(""+
			"DELETE "+
			"FROM users "+
			"WHERE id = $1",
		id, 
	)

	if err != nil {
		return err
	} else {
		return nil
	}
} 

